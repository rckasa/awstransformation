---
AWSTemplateFormatVersion: '2010-09-09'
Description: Automated Remediations for AWS Inspector Vulnerability assessments

# ---------------------------------------------------------------------------------------------------------------
# CloudFormation Template 1 of 1
# Automated Remediations for AWS Inspector. Detects and remediates CVE vulnerabilities on EC2
# Can be extended for other AWS supported Vulnerability assessments
# Provisions dummy ec2 instances for demonstration and testing
#
# @author Kanishk Mahajan
# ----------------------------------------------------------------------------------------------------------------

Parameters: 
  KeyName:
    Description: EC2 Key Pair
    Type: "AWS::EC2::KeyPair::KeyName"

  InspectorTopic:
    Description: SNS Topic for receiving Inspector Events
    Default: InspectorTopic


Mappings:
  RegionMap:
    us-west-2:
      "AMALINUX" : "ami-0e8c04af2729ff1bb" 
    us-east-1:
      "AMALINUX" : "ami-0fc61db8544a617ed" 
    us-west-1:
      "AMALINUX" : "ami-de347abe" 
    us-west-2:
      "AMALINUX" : "ami-b04e92d0" 

Resources:

# -----------------------------------------------------------------------------------------------------------------------
# Custom Resource to support SNS subscripton for AWS Inspector Events
# -  Not currently supported ootb in CloudFormation
# .......................................................................................................................

  #CustomResource for AWS Inspector Subscription
  InspectorSubscription:
    Type: Custom::InspectorSubscription
    DependsOn:
      - InspectorTopic
      - InspectorSubscriptionLambda
      - LambdaExecutePermission
    Properties:
      ServiceToken: !GetAtt
        - InspectorSubscriptionLambda
        - Arn
      InspectorTemplate: !GetAtt 
        - InspectorTemplate
        - Arn
      Topic: !GetAtt
        - InspectorTopic
        - Arn


  #Lambda Custom Resource for AWS Inspector Subscription
  InspectorSubscriptionLambda:
    Type: 'AWS::Lambda::Function'
    DependsOn: IAMRoleForLambdaSubscription
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import botocore
          import os
          import cfnresponse
          import logging
          from botocore.vendored import requests

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
    
          inspector = boto3.client('inspector')
          resourceArn = event['ResourceProperties']['InspectorTemplate']
          topicArn = event['ResourceProperties']['Topic']
          inspectorevents = ['ASSESSMENT_RUN_STARTED', 'ASSESSMENT_RUN_COMPLETED','ASSESSMENT_RUN_STATE_CHANGED','FINDING_REPORTED']

          def handler(event, context):

            logger.info('Event Received : {}'.format(event))
            responsedata = {}
     
            if event['RequestType'] == "Delete":
                logger.info(f'Request Type is Delete; unsupported')
                cfnsend(event, context, 'SUCCESS', responsedata)
                return event

            if event['RequestType'] != 'Delete': 
              try:
                logger.info('Subscription to sns')
                for inspectorevent in inspectorevents:
                  print('inspectorevent:', inspectorevent)
                  response = inspector.subscribe_to_event(
                      resourceArn=resourceArn,
                      event=inspectorevent,
                      topicArn=topicArn
                  )

              except:
                logger.error('Event Failed : {}'.format(event))
                cfnsend(event, context, 'FAILED', responsedata, 'Inspector Event not found')

            cfnsend(event, context, 'SUCCESS', responsedata)
            return "Success"

          def cfnsend(event, context, responseStatus, responseData, reason=None):
              if 'ResponseURL' in event:
                  responseUrl = event['ResponseURL']
                  # Build out the response json
                  responseBody = {}
                  responseBody['Status'] = responseStatus
                  responseBody['Reason'] = reason or 'CWL Log Stream =' + context.log_stream_name
                  responseBody['PhysicalResourceId'] = context.log_stream_name
                  responseBody['StackId'] = event['StackId']
                  responseBody['RequestId'] = event['RequestId']
                  responseBody['LogicalResourceId'] = event['LogicalResourceId']
                  responseBody['Data'] = responseData
                  json_responseBody = json.dumps(responseBody)

                  logger.info(f'Response body: + {json_responseBody}')

                  headers = {
                      'content-type': '',
                      'content-length': str(len(json_responseBody))
                  }
                  # Send response back to CFN
                  try:
                      response = requests.put(responseUrl,
                                              data=json_responseBody,
                                              headers=headers)
                      logger.info(f'Status code: {response.reason}')
                  except Exception as e:
                      logger.info(f'send(..) failed executing requests.put(..):  {str(e)}')
      Handler: index.handler
      Runtime: python3.7
      MemorySize: 128
      Role: !GetAtt IAMRoleForLambdaSubscription.Arn
      Timeout: 30


  # GuardDuty CloudWatch Event - For GuardDuty Finding: Stealth:IAM/PasswordPolicyChange
  GuardDutyIAMEvent:
    DependsOn:
      - GuardDutyRemediationIAMLambda
    Type: AWS::Events::Rule
    Properties:
      Name: GuardDuty-IAM-Finding
      Description: "GuardDuty IAM Event"
      EventPattern:
        source:
        - aws.guardduty
        detail:
          type:
          - Stealth:IAMUser/PasswordPolicyChange
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt GuardDutyRemediationIAMLambda.Arn
          Id: "GuardDutyIAMEvent-Lambda-Trigger"


  # GuardDuty CloudWatch Event - For GuardDuty Finding:  Recon:EC2/Portscan
  GuardDutyEC2Event:
    DependsOn:
      - GuardDutyRemediationEC2Lambda
    Type: AWS::Events::Rule
    Properties:
      Name: GuardDuty-EC2-Finding
      Description: "GuardDuty EC2 Event"
      EventPattern:
        source:
        - aws.guardduty
        detail:
          type:
          - Recon:EC2/Portscan
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt GuardDutyRemediationEC2Lambda.Arn
          Id: "GuardDutyEC2Event-Lambda-Trigger"

  # Remediation Lambda - IAM
  GuardDutyRemediationIAMLambda:
    DependsOn:
      - EC2VPC1
      - GuardDutyRemediationLambdaIAMRole
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName:
        Fn::Join:
        - '-'
        - ["GuardDuty", 'IAM', 'RemediationLambda']
      Handler: "index.handler"
      Role:
        Fn::GetAtt:
          - "GuardDutyRemediationLambdaIAMRole"
          - "Arn"
      Code:
        ZipFile: |
          from __future__ import print_function
          from botocore.exceptions import ClientError
          import boto3
          import json
          import os

          def handler(event, context):
            try:
              iam = boto3.client('iam')
              response = iam.update_account_password_policy(
                            AllowUsersToChangePassword=True,
                            HardExpiry=True,
                            MaxPasswordAge=90 ,
                            MinimumPasswordLength=14,
                            PasswordReusePrevention=24,
                            RequireLowercaseCharacters=True,
                            RequireNumbers=True,
                            RequireSymbols=True,
                            RequireUppercaseCharacters=True)

            except ClientError as e:
              print(e)
            return response
      Runtime: "python3.7"
      Timeout: "35"


  # Remediation Lambda - IAM Role
  GuardDutyRemediationLambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  # Remediation Lambda - EC2
  GuardDutyRemediationEC2Lambda:
    DependsOn:
      - EC2VPC1
      - GuardDutyRemediationLambdaEC2Role
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName:
        Fn::Join:
        - '-'
        - ["GuardDuty", 'EC2', 'RemediationLambda']
      Handler: "index.handler"
      Environment:
        Variables:
          INSTANCE_ID: !Ref EC2VPC1
      Role:
        Fn::GetAtt:
          - "GuardDutyRemediationLambdaEC2Role"
          - "Arn"
      Code:
        ZipFile: |
          from __future__ import print_function
          from botocore.exceptions import ClientError
          import boto3
          import json
          import os

          def handler(event, context):
            try:
              ec2 = boto3.resource('ec2')
              instanceID = event["detail"]["resource"]["instanceDetails"]["instanceId"]
              if instanceID == os.environ['INSTANCE_ID']:
                # Stop Instance
                response = ec2.stop_instances(
                    InstanceIds=[
                        instanceID,
                    ],
                )
              else:
                print("Instance not found")
            except ClientError as e:
              print(e)
            return response
      Runtime: "python3.7"
      Timeout: "35"

  # Remediation Lambda - EC2 Role
  GuardDutyRemediationLambdaEC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess


  GuardDutyRemediationIAMLambdaInvokePermissions:
    DependsOn:
      - GuardDutyRemediationIAMLambda
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref "GuardDutyRemediationIAMLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"

  GuardDutyRemediationEC2LambdaInvokePermissions:
    DependsOn:
      - GuardDutyRemediationEC2Lambda
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref "GuardDutyRemediationEC2Lambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"

# -----------------------------------------------------------------------------------------------------------------------
# EC2 Set up
# Provisions EC2 instances in the relevant subnets and associated security groups for VPC1 and VPC3 
# with ssh and icmp access
# User Data section is self contained to generate malicious access
# .......................................................................................................................

  EIPEC2VPC3:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref EC2VPC3
      Domain: vpc

  EC2VPC1: 
    Type: "AWS::EC2::Instance"
    DependsOn:
      - SGEC2VPC1
      - EIPEC2VPC3
      - EC2VPC1InstanceProfile
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX] # Dynamic mapping + Pseudo Parameter
      InstanceType: t2.micro
      IamInstanceProfile: !Ref EC2VPC1InstanceProfile
      KeyName: !Ref KeyName
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: SGEC2VPC1
          SubnetId: !ImportValue subnetvpc1
      UserData:
        Fn::Base64: !Sub 
          - |
            #!/bin/bash -ex

            # Start SSM Agent
            sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm

            # Install pre-reqs
            export PATH=$PATH:/usr/local/bin:/usr/sbin:/root/.local/bin
            echo 'export PATH=/root/.local/bin:/usr/sbin:$PATH' >> /home/ec2-user/.profile
            sudo yum update -y
            sudo yum install -y nmap git python python2-pip python-argparse gcc gcc-c++ glib2-devel

            # Create findings file and generate finding
            touch /home/ec2-user/gd-portscan.sh
            cat <<EOF >> /home/ec2-user/gd-portscan.sh
            #!/bin/bash
            for j in {1..10} 
            do
              sudo nmap -sT ${IP}
            done
            EOF

            sudo chmod +x /home/ec2-user/gd-portscan.sh
            ./gd-portscan.sh
          -
            Profile:
              !Ref EC2VPC1InstanceProfile
            Region:
              !Ref "AWS::Region"
            IP:
              !Ref EIPEC2VPC3

  EC2VPC3: 
    Type: "AWS::EC2::Instance"
    DependsOn: 
      - SGEC2VPC3
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX] # Dynamic mapping + Pseudo Parameter
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: SGEC2VPC3
          SubnetId: !ImportValue subnetvpc3
     
  EC2VPC1InstanceProfile:
    DependsOn:
      - EC2VPC1Role
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName:
        Fn::Join:
        - '-'
        - ['ec2vpc1', 'instance','profile']
      Path: /
      Roles:
        - !Ref EC2VPC1Role 


  EC2VPC1Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
        - '-'
        - ['ec2vpc1', 'instance', 'role']
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Policies:
        -
          PolicyName: GuardDutyPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - guardduty:GetDetector
                  - guardduty:ListDetectors
                  - guardduty:CreateThreatIntelSet
                  - guardduty:UpdateThreatIntelSet
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:DescribeParameters
                  - ssm:GetParameters
                  - ssm:DeleteParameter
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - iam:*
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - dynamodb:*
                Resource: '*'
              -
                Effect: Allow
                Action: s3:*
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - iam:PutRolePolicy
                Resource:
                  Fn::Join:
                    - ':'
                    - ["arn:aws:iam:",!Ref "AWS::AccountId", "role/aws-service-role/guardduty.amazonaws.com/*"]


  SGEC2VPC1:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Join ["", ["Stack", "-", !Ref "AWS::StackId", "-", "VPC1"]]
      VpcId: !ImportValue vpc1id
      SecurityGroupIngress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: 22
          FromPort: 22
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: icmp
          ToPort: "-1"
          FromPort: "-1"
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          ToPort: "-1"
          IpProtocol: "-1"

  SGEC2VPC1LockDown:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Join ["", ["Stack", "-", !Ref "AWS::StackId", "-", "VPC1"]]
      VpcId: !ImportValue vpc1id
      SecurityGroupIngress:
        -
          CidrIp: 10.10.0.0/16
          IpProtocol: icmp
          ToPort: "-1"
          FromPort: "-1"
      SecurityGroupEgress:
        -
          CidrIp: 10.10.0.0/16
          FromPort: "-1"
          ToPort: "-1"
          IpProtocol: icmp

  SGEC2VPC3:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Join ["", ["Stack", "-", !Ref "AWS::StackId", "-", "VPC3"]]
      VpcId: !ImportValue vpc3id
      SecurityGroupIngress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: 22
          FromPort: 22
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: icmp
          ToPort: "-1"
          FromPort: "-1"
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          ToPort: "-1"
          IpProtocol: "-1"