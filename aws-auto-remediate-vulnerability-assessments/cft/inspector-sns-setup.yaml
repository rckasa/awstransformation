Resources:
  CFhelperLayer:
    Type: AWS::Lambda::LayerVersion
    Properties: 
      CompatibleRuntimes: 
        - python3.7
      Content: 
          S3Bucket: crhelper-layer-bucket
          S3Key: crhelper-layer.zip
      LayerName: CF-helper-layer

  InspectorSubscribeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: InspectorSubscribeLambdaExecutionRole
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: "*"
            - Effect: Allow
              Action: inspector:SubscribeToEvent
              Resource: "*"

  LambdaSSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: lambda-ssm-execution-role
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: ssm:SendCommand
              Resource:
              - !Sub 
                - arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${InstanceId}
                - { InstanceId: !Ref DummyInstance }
              - arn:aws:ssm:*:*:document/*
            - Effect: Allow
              Action:
              - ssm:DescribeInstanceInformation
              - inspector:DescribeFindings
              - logs:CreateLogStream
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:CreateLogGroup
              - logs:PutLogEvents
              Resource: "*"

  EC2SSMRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  
  DummyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: EC2InstanceProfile
      Roles: 
        - !Ref EC2SSMRole

  InspectorSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties: 
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - SNS:GetTopicAttributes
          - SNS:SetTopicAttributes
          - SNS:AddPermission
          - SNS:RemovePermission
          - SNS:DeleteTopic
          - SNS:Subscribe
          - SNS:ListSubscriptionsByTopic
          - SNS:Publish
          - SNS:Receive
          Resource: !Ref SNSInspectorTopic
      Topics: 
        - !Ref SNSInspectorTopic

  CustomInspectorSubscribeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: inspector-subscribe-lambda
      Code:
        ZipFile: |
          import boto3
          from crhelper import CfnResource

          helper = CfnResource()

          @helper.create
          @helper.update
          def attach_sns_to_assessment(event, _):
            client = boto3.client('inspector')
            resourceArn = event['ResourceProperties']['ResourceArn']
            topicArn = event['ResourceProperties']['TopicArn']
            events = ['ASSESSMENT_RUN_STARTED', 'ASSESSMENT_RUN_COMPLETED','ASSESSMENT_RUN_STATE_CHANGED','FINDING_REPORTED']
           # try:
            for event in events:
              print('event:', event)
              response = client.subscribe_to_event(
                  resourceArn=resourceArn,
                  event=event,
                  topicArn=topicArn
              )
              print('response:',response)
            # except Exception as e: 
            #   helper.Data['done'] = False
            #   helper.Data['message'] = str(e)
            helper.Data['done'] = True
            return "CustomInspectorSubscribeLambdaResource"

          @helper.delete
          def no_op(_, __):
            pass
            
          def handler(event, context):
            helper(event, context)
      Layers:
        - !Ref CFhelperLayer
      Handler: index.handler
      Role: !GetAtt InspectorSubscribeLambdaRole.Arn
      Runtime: python3.7

  InspectorSSMLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: inspector-lambda
      Code:
        ZipFile: | 
          import boto3,json,logging,datetime
          Y=isinstance
          M=None
          s=datetime.date
          J=datetime.datetime
          V=logging.INFO
          T=logging.getLogger
          S=json.loads
          H=boto3.client
          u=H('ssm')
          F=H('inspector')
          a=T()
          a.setLevel(V)
          f=lambda obj:(obj.isoformat()if Y(obj,J)or Y(obj,s)else M)
          def lambda_handler(event,context):
           a.debug('Raw Lambda event:')
           a.debug(event)
           v=event['Records'][0]['Sns']['Message']
           a.debug('Event from SNS: '+v)
           G=S(v)['event']
           a.info('Inspector SNS message type: '+G)
           if G!="FINDING_REPORTED":
            a.info('Skipping notification that is not a new finding: '+G)
            return 1
           N=S(v)['finding']
           a.info('Finding ARN: '+N)
           h=F.describe_findings(findingArns=[N],locale='EN_US')
           a.debug('Inspector DescribeFindings response:')
           a.debug(h)
           W=h['findings'][0]
           a.debug('Raw finding:')
           a.debug(W)
           D=W['title']
           a.debug('Finding title: '+D)
           if D=="Unsupported Operating System or Version":
            a.info('Skipping finding: '+D)
            return 1
           if D=="No potential security issues found":
            a.info('Skipping finding: '+D)
            return 1
           C=W['service']
           a.debug('Service: '+C)
           if C!="Inspector":
            a.info('Skipping finding from service: '+C)
            return 1
           P=""
           for t in W['attributes']:
            if t['key']=="CVE_ID":
             P=t['value']
             break
           a.info('CVE ID: '+P)
           if P=="":
            a.info('Skipping non-CVE finding (could not find CVE ID)')
            return 1
           o=W['assetType']
           a.debug('Asset type: '+o)
           if o!="ec2-instance":
            a.info('Skipping non-EC2-instance asset type: '+o)
            return 1
           p=W['assetAttributes']['agentId']
           a.info('Instance ID: '+p)
           if not p.startswith("i-"):
            a.info('Invalid instance ID: '+p)
            return 1
           y=[{'key':'InstanceIds','valueSet':[p]}]
           h=u.describe_instance_information(InstanceInformationFilterList=y,MaxResults=50)
           a.debug('SSM DescribeInstanceInformation response:')
           a.debug(h)
           U=h['InstanceInformationList'][0]
           a.debug('Instance information:')
           a.debug(U)
           K=U['PingStatus']
           a.info('SSM status of instance: '+K)
           j=U['LastPingDateTime']
           a.debug('SSM last contact:')
           a.debug(j)
           r=U['AgentVersion']
           a.debug('SSM agent version: '+r)
           e=U['PlatformType']
           a.info('OS type: '+e)
           B=U['PlatformName']
           a.info('OS name: '+B)
           R=U['PlatformVersion']
           a.info('OS version: '+R)
           if K!='Online':
            a.info('SSM agent for this instance is not online: '+K)
            return 1
           if e!="Linux":
            a.info('Skipping non-Linux platform: '+e)
            return 1
           if B=='Ubuntu':
            Q="apt-get update -qq -y; apt-get upgrade -y"
           elif B=='Amazon Linux AMI' or B=='Amazon Linux':
            Q="yum update -q -y; yum upgrade -y"
           else:
            a.info('Unsupported Linux distribution: '+B)
            return 1
           a.info('Command line to execute: '+Q)
           h=u.send_command(InstanceIds=[p],DocumentName='AWS-RunShellScript',Comment='Lambda function performing Inspector CVE finding auto-remediation',Parameters={'commands':[Q]})
           a.info('SSM send-command response:')
           a.info(h)
      Handler: index.lambda_handler
      Role: !GetAtt LambdaSSMRole.Arn
      Runtime: python3.7

  InspectorSubscribeResource:
    Type: Custom::InspectorSubscribeResource
    Properties:
      Name: InspectorCustomResource
      ServiceToken: !GetAtt CustomInspectorSubscribeLambda.Arn
      ResourceArn: !GetAtt InspectorTemplate.Arn
      TopicArn: !Ref SNSInspectorTopic

  DummyInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-040ba9174949f6de4 # Amazon Linux AMI, eu-west-1
      Tags:
        - 
          Key: Environment
          Value: Production
      InstanceType: t2.micro
      IamInstanceProfile: !Ref DummyInstanceProfile
      UserData: !Base64 |
        #!/bin/bash
        curl -O https://inspector-agent.amazonaws.com/linux/latest/install
        bash install

  SNSInspectorTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: SNSInspectorTopic
      TopicName: SNSInspectorTopic

  SNSInspectorSubscription:
    Type: AWS::SNS::Subscription
    Properties: 
      Protocol: lambda
      Endpoint: !GetAtt InspectorSSMLambda.Arn
      TopicArn: !Ref SNSInspectorTopic

  InspectorResourceGroup:
    Type: AWS::Inspector::ResourceGroup
    Properties: 
      ResourceGroupTags: 
        -
          Key: Environment
          Value: Production

  InspectorTarget:
    Type: AWS::Inspector::AssessmentTarget
    Properties: 
      AssessmentTargetName: Assessment-Production
      ResourceGroupArn: !GetAtt InspectorResourceGroup.Arn

  InspectorTemplate:
    Type: AWS::Inspector::AssessmentTemplate
    Properties: 
      AssessmentTargetArn: !GetAtt InspectorTarget.Arn
      AssessmentTemplateName: Assessment-Production-Template
      DurationInSeconds: 900
      RulesPackageArns: 
        # Should ideally write a custom Lambda Resource to get this
        - arn:aws:inspector:eu-west-1:357557129151:rulespackage/0-ubA5XvBh

Outputs:
  SubscribeDone:
    Value: !GetAtt InspectorSubscribeResource.done
