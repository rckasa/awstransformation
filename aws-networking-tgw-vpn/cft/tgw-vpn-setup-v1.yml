---
AWSTemplateFormatVersion: '2010-09-09'
Description: Site-to-Site VPN Connection, Transit Gateway, Transit Gateway Attachments for VPC and VPN 

# ---------------------------------------------------------------------------------------------------------------
# CloudFormation Template 2 of 2
# Provide full automation for a Site to Site VPN and a Transit Gateway Deployment
# Demonstrates how to move off full mesh networks to hub and spoke topologies and for both AWS and hybrid networks
#
# @author Kanishk Mahajan
##
## License:
## This code is made available under the MIT-0 license. See the LICENSE file.
# ----------------------------------------------------------------------------------------------------------------

Parameters: 
  RemoteVpnDeviceIp:
    Description: Enter External IP Address of the Customer VPN Device.
    Type: String
    MinLength: '7'
    MaxLength: '24'
    Default: 198.199.95.228
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})"
    ConstraintDescription: Must be a valid IP Address x.x.x.x
  RemoteNetworkCidr:
    Description: Enter Remote Network IP Range CIDR (i.e. 192.168.100.0/24).
    Type: String
    MinLength: '7'
    MaxLength: '24'
    Default: 10.255.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  VPC1SubnetCidr:
    Description: Enter CIDR for VPC 1 (i.e. 10.10.0.0/16).
    Type: String
    MinLength: '7'
    MaxLength: '24'
    Default: 10.10.0.0/20
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  VPC3SubnetCidr:
    Description: Enter CIDR for VPC 3 (i.e. 10.11.0.0/16).
    Type: String
    MinLength: '7'
    MaxLength: '24'
    Default: 10.11.0.0/20
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  RemoteBgpAsn:
    Description: Enter Remote VPN Device BGP ASN.
    Type: String
    MinLength: '4'
    MaxLength: '5'
    Default: '65000'
    AllowedPattern: "(\\d{4,5})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  KeyName:
    Description: EC2 Key Pair
    Type: "AWS::EC2::KeyPair::KeyName"

Mappings:
  RegionMap:
    us-west-2:
      "AMALINUX" : "ami-0e8c04af2729ff1bb" 
    us-east-2:
      "AMALINUX" : "ami-0e01ce4ee18447327" 
    us-west-1:
      "AMALINUX" : "ami-de347abe" 
    us-west-2:
      "AMALINUX" : "ami-b04e92d0" 

Resources:

# -----------------------------------------------------------------------------------------------------------------------
# AWS Site to Site VPN set up
# Includes VPN Gateway, Customer Gateway and Route Propogations
# -----------------------------------------------------------------------------------------------------------------------

  VPNGateway:
    Type: AWS::EC2::VPNGateway
    Properties:
      Type: ipsec.1

  VPNGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !ImportValue vpc1id
      VpnGatewayId:
        Ref: VPNGateway
  
  CustomerGateway:
    Type: AWS::EC2::CustomerGateway
    Properties:
      Type: ipsec.1
      BgpAsn:
        Ref: RemoteBgpAsn
      IpAddress:
        Ref: RemoteVpnDeviceIp

  VPNConnection:
    Type: AWS::EC2::VPNConnection
    DependsOn:
    - CustomerGateway
    - VPNGateway
    Properties:
      Type: ipsec.1
      StaticRoutesOnly: 'true'
      CustomerGatewayId:
        Ref: CustomerGateway
      VpnGatewayId:
        Ref: VPNGateway
 
  VPNGatewayRoutePropagation:
    Type: AWS::EC2::VPNGatewayRoutePropagation
    DependsOn:
    - VPNGateway
    - VPNConnection
    Properties:
      RouteTableIds:
      - !ImportValue routetablesubnetvpc1
      VpnGatewayId:
        Ref: VPNGateway

  VPC1VPNRoute:
    Type: AWS::EC2::Route
    DependsOn: 
    - VPNGateway
    - VPNGatewayAttachment
    Properties:
      RouteTableId: !ImportValue routetablesubnetvpc1
      DestinationCidrBlock: 
        Ref: RemoteNetworkCidr
      GatewayId: 
        Ref: VPNGateway
      

  
# -----------------------------------------------------------------------------------------------------------------------
# AWS Transit Gateway set up
# Includes Transit Gateway VPC Attachments and Route Table Propagations 
# Transit Gateway VPN Attachments are not currently supported in CloudFormation
#  -- Custom resource is developed below to provision a Transit Gateway VPN Attachment
# .......................................................................................................................

  TGWLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
         -
          Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action: sts:AssumeRole

  TGWLambdaExecutionPolicy:
    Type: AWS::IAM::Policy
    DependsOn: TGWLambdaExecutionRole
    Properties:
      PolicyName: TGWLambdaExecutionPolicy
      PolicyDocument:
        Statement:
        -
          Effect: Allow
          Action:
            - "ec2:CreateVpnConnection"
            - "ec2:ModifyVpnConnection"
            - "ec2:ModifyVpnTunnelOptions"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            - "logs:CreateLogGroup"
            - "logs:DescribeLogStreams"
          Resource: "*"
      Roles:
        -
          Ref: TGWLambdaExecutionRole

  AttachVPNToTransitGateway:
    Type: Custom::ExecuteTransitGatewayVPNAttachment
    DependsOn:
    - CustomerGateway
    - TransitGateway
    Properties:
      ServiceToken: !GetAtt 'ExecuteTransitGatewayVPNAttachment.Arn'
      CustomerGatewayId: !Ref CustomerGateway
      TransitGatewayId: !Ref TransitGateway

  ExecuteTransitGatewayVPNAttachment:
    Type: AWS::Lambda::Function
    DependsOn: TGWLambdaExecutionRole
    Properties:
      Handler: index.handler
      Timeout: 600
      Role: !GetAtt 'TGWLambdaExecutionRole.Arn'
      Runtime: python3.6
      Code:
        ZipFile: |
          import logging
          import boto3
          import os
          import cfnresponse
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          client = boto3.client('ec2')
          def handler(event, context):
              if event['RequestType'] != 'Delete': 
                try:
                    customergatewayid = event['ResourceProperties']['CustomerGatewayId']
                    transitgatewayid = event['ResourceProperties']['TransitGatewayId']
                    response = client.create_vpn_connection(CustomerGatewayId=customergatewayid, Type='ipsec.1', TransitGatewayId=transitgatewayid, Options={'StaticRoutesOnly': True})
                except Exception as e:
                    print(e)
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "CustomResourcePhysicalID")
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "CustomResourcePhysicalID")
              return "Success"

  TransitGateway:
    Type: AWS::EC2::TransitGateway
    Properties:
      AmazonSideAsn: 65001
      Description: 'Transit Gateway'
      DefaultRouteTableAssociation: 'enable'
      DefaultRouteTablePropagation: 'enable'
      DnsSupport: 'enable'
      VpnEcmpSupport: 'enable'

  TransitGatewayAttachementVPC1:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
      - !ImportValue subnetvpc1
      TransitGatewayId:
        Ref: TransitGateway
      VpcId: !ImportValue vpc1id
        
  TransitGatewayAttachementVPC3:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
      - !ImportValue subnetvpc3
      TransitGatewayId:
        Ref: TransitGateway
      VpcId: !ImportValue vpc3id

  VPC1VPC3Route:
    Type: AWS::EC2::Route
    DependsOn: 
    - TransitGateway
    - TransitGatewayAttachementVPC1
    Properties:
      RouteTableId: !ImportValue routetablesubnetvpc1
      DestinationCidrBlock: 
        Ref: VPC3SubnetCidr
      TransitGatewayId: 
        Ref: TransitGateway

  VPC3VPC1Route:
    Type: AWS::EC2::Route
    DependsOn: 
    - TransitGateway
    - TransitGatewayAttachementVPC3
    Properties:
      RouteTableId: !ImportValue routetablesubnetvpc3
      DestinationCidrBlock: 
        Ref: VPC1SubnetCidr
      TransitGatewayId: 
        Ref: TransitGateway
      
  VPC3VPNRoute:
    Type: AWS::EC2::Route
    DependsOn: 
    - TransitGateway
    - TransitGatewayAttachementVPC3
    Properties:
      RouteTableId: !ImportValue routetablesubnetvpc3
      DestinationCidrBlock: 
        Ref: RemoteNetworkCidr
      TransitGatewayId: 
        Ref: TransitGateway
   

# -----------------------------------------------------------------------------------------------------------------------
# Demo Set up
# Provision EC2 instances in the relevant subnets for VPC1 and VPC3 with ssh and icmp access
# 
# Demonstrate  Secure Private network connectivity between VPC1 and OnPremise using VPN and the transition model
# for future private connectivity - between OnPremise and VPC3 and between VPCs using TGW
# .......................................................................................................................

  EC2VPC1: 
    Type: "AWS::EC2::Instance"
    DependsOn: SGEC2VPC1
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX] # Dynamic mapping + Pseudo Parameter
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: SGEC2VPC1
          SubnetId: !ImportValue subnetvpc1


  EC2VPC3: 
    Type: "AWS::EC2::Instance"
    DependsOn: SGEC2VPC3
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX] # Dynamic mapping + Pseudo Parameter
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: SGEC2VPC3
          SubnetId: !ImportValue subnetvpc3
   

  SGEC2VPC1:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Join ["", ["Stack", "-", !Ref "AWS::StackId", "-", "VPC1"]]
      VpcId: !ImportValue vpc1id
      SecurityGroupIngress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: 22
          FromPort: 22
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: icmp
          ToPort: "-1"
          FromPort: "-1"
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          ToPort: "-1"
          IpProtocol: "-1"

  SGEC2VPC3:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Join ["", ["Stack", "-", !Ref "AWS::StackId", "-", "VPC3"]]
      VpcId: !ImportValue vpc3id
      SecurityGroupIngress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: 22
          FromPort: 22
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: icmp
          ToPort: "-1"
          FromPort: "-1"
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          ToPort: "-1"
          IpProtocol: "-1"