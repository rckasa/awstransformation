---
AWSTemplateFormatVersion: '2010-09-09'
Description: Transit Gateway, Transit Gateway Attachments for VPN 

# ---------------------------------------------------------------------------------------------------------------
# CloudFormation Template 1 of 1
# Provides automation for set up of a Transit Gateway in the master account (shared services OU)
# Also sets up a TGW VPN attachment
#
# @author Kanishk Mahajan
# ----------------------------------------------------------------------------------------------------------------

Parameters: 
  RemoteVpnDeviceIP:
    Description: Enter External IP Address of the Customer VPN Device.
    Type: String
    MinLength: '7'
    MaxLength: '24'
    Default: 198.199.95.228
    ConstraintDescription: Must be a valid IP Address x.x.x.x
  RemoteVpnDeviceCIDR:
    Description: Enter External IP Address of the Customer VPN Device.
    Type: String
    MinLength: '7'
    MaxLength: '24'
    Default: 198.199.95.228/32
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP Address x.x.x.x/x
  RemoteNetworkCidr:
    Description: Enter Remote Network IP Range CIDR (i.e. 192.168.100.0/24).
    Type: String
    MinLength: '7'
    MaxLength: '24'
    Default: 10.255.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  RemoteBgpAsn:
    Description: Enter Remote VPN Device BGP ASN.
    Type: String
    MinLength: '4'
    MaxLength: '5'
    Default: '65000'
    AllowedPattern: "(\\d{4,5})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.

Resources:

# -----------------------------------------------------------------------------------------------------------------------
# AWS Transit Gateway set up
# Includes Transit Gateway VPN Attachment
# .......................................................................................................................

  CustomerGateway:
    Type: AWS::EC2::CustomerGateway
    Properties:
      Type: ipsec.1
      BgpAsn:
        Ref: RemoteBgpAsn
      IpAddress:
        Ref: RemoteVpnDeviceIP

  TGWLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
         -
          Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action: sts:AssumeRole

  TGWLambdaExecutionPolicy:
    Type: AWS::IAM::Policy
    DependsOn: TGWLambdaExecutionRole
    Properties:
      PolicyName: TGWLambdaExecutionPolicy
      PolicyDocument:
        Statement:
        -
          Effect: Allow
          Action:
            - "ec2:CreateVpnConnection"
            - "ec2:ModifyVpnConnection"
            - "ec2:ModifyVpnTunnelOptions"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            - "logs:CreateLogGroup"
            - "logs:DescribeLogStreams"
          Resource: "*"
      Roles:
        -
          Ref: TGWLambdaExecutionRole

  AttachVPNToTransitGateway:
    Type: Custom::ExecuteTransitGatewayVPNAttachment
    DependsOn:
    - CustomerGateway
    - TransitGateway
    Properties:
      ServiceToken: !GetAtt 'ExecuteTransitGatewayVPNAttachment.Arn'
      CustomerGatewayId: !Ref CustomerGateway
      TransitGatewayId: !Ref TransitGateway

  ExecuteTransitGatewayVPNAttachment:
    Type: AWS::Lambda::Function
    DependsOn: TGWLambdaExecutionRole
    Properties:
      Handler: index.handler
      Timeout: 600
      Role: !GetAtt 'TGWLambdaExecutionRole.Arn'
      Runtime: python3.6
      Code:
        ZipFile: |
          import logging
          import boto3
          import os
          import cfnresponse
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          client = boto3.client('ec2')
          def handler(event, context):
              if event['RequestType'] != 'Delete': 
                try:
                    customergatewayid = event['ResourceProperties']['CustomerGatewayId']
                    transitgatewayid = event['ResourceProperties']['TransitGatewayId']
                    response = client.create_vpn_connection(CustomerGatewayId=customergatewayid, Type='ipsec.1', TransitGatewayId=transitgatewayid, Options={'StaticRoutesOnly': True})
                except Exception as e:
                    print(e)
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "CustomResourcePhysicalID")
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "CustomResourcePhysicalID")
              return "Success"

  TransitGateway:
    Type: AWS::EC2::TransitGateway
    Properties:
      AmazonSideAsn: 65001
      Description: 'Transit Gateway'
      DefaultRouteTableAssociation: 'enable'
      DefaultRouteTablePropagation: 'enable'
      AutoAcceptSharedAttachments: 'enable'
      DnsSupport: 'enable'
      VpnEcmpSupport: 'enable'

Outputs:
  TransitGatewayId: #Outputs the Transit Gateway ID
    Description: The Transit Gateway ID
    Value: !Ref TransitGateway
    Export: # added to export
      Name: TransitGatewayId
