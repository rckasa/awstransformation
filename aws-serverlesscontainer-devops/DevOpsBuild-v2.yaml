# -------------------------------------------------------------------------------------------------------------------------------------------------------
# DevOps Automation - Link OnPremise Code Development with AWS Deployments
# ------Event Driven, Zero downtime, Serverless AWS Deployments
#
# 1 -  Installs a container in the customer's ECR
# 2 - Provisions an entire ECS/Fargate serverless cluster that is load balanced and auto scaled
# 3-  DeployS the container image on the ECS/Fargate cluster
# 4-  For inbound image updates - Provisions a Lambda function
#       - the Lambda function polls a TLX endpoint and deploys a rolling update on the ECS container 
# 5-  For outbound updates -  Provisions a SNS topic and CloudWatch Logs Metric Filter.
#      - the CW Logs Metric Filter is used to publish log events in real time to a SNS topic
#      ---the SNS topic has a HTTP(s) subscriber.
#      ----the HTTP(s) subscriber will be a TLX HTTP endpoint that receives the events 
# 
# TLX - fictitious onpremise product/container development environment
#
# @author - Kanishk Mahajan
# ------------------------------------------------------------------------------------------------------------------------------------------------------- 



Parameters:
  
  DefaultVPC:
    Type: 'List<AWS::EC2::VPC::Id>'

  DefaultSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'

  DefaultSecurityGroup:
    Type: 'List<AWS::EC2::SecurityGroup::Id>'

  ECRName:
    Type: String
    Default: cda-penguin-app

  TLXLambdaS3Bucket:
    Description: S3 Bucket for TLX Lambda
    Type: String
    Default: s3-tlx

  TLXServiceURL:
    Description: URL for TLX Service that receives image updates from TLX Main
    Type: String
    Default: 'https://www.trustservice.io/service/image'

  TLXSNSTopicName:
    Description: SNS topic Name. TLX CloudWath Logs publishes to this topic
    Type: String
    Default: tlxsnstopic
  
  TLXEventUpdatesURL:
    Description: URL for TLX Service that is a subscriber to SNS topic and receives real time updates from CloudWatch Logs
    Type: String
    Default: 'https://www.trustservice.io/service/events'

  S3ImageLocation:
    Type: String
    Default: s3-tlx-189837654402-us-east-2/cda-2018-flask-app.zip
    ConstraintDescription: '[A-Za-z0-9\-]+/'
    Description: |
      S3 Key for Code zip file. BucketName/zipfile. Must includes buildspec.yml in root folder

Resources:

# -------------------------------------------------------------------------------------------------------------------------------------------------------
# TLX Product Template - v1
# AWS CodeBuild with a custom Resource that pulls code from S3, builds Docker image
# and installs Docker image in AWS ECR. 
# ------------------------------------------------------------------------------------------------------------------------------------------------------- 

  CodeBuildServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
      - PolicyName: codebuild-base-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 
                - 'codebuild:*'
              Resource: '*'
            - Effect: Allow
              Action:
                - 's3:GetObject'
                - 's3:PutObject'
                - 's3:GetObjectVersion'
                - 's3:GetBucketVersioning'
                - 's3:GetBucketAcl'
                - 's3:GetBucketLocation'
                - 's3:ListBucket'
              Resource: '*'
            - Effect: Allow
              Action:
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:CompleteLayerUpload'
                - 'ecr:GetAuthorizationToken'
                - 'ecr:InitiateLayerUpload'
                - 'ecr:PutImage'
                - 'ecr:UploadLayerPart'
              Resource: '*'
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'
            - Effect: Allow
              Action:
                - 's3:*'
                - 'cloudformation:*'
                - 'iam:PassRole'
              Resource: '*'
        
  CodeBuildLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
      - PolicyName: lamdbda-base-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 
                - 'codebuild:*'
              Resource: '*'
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'


  TLXLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/tlx-fargate-container-${AWS::StackName}

  StartBuild:
    Type: Custom::ExecuteCodeBuild
    DependsOn: CodeBuildProject
    Properties:
      ServiceToken: !GetAtt 'ExecuteCodeBuild.Arn'
      BuildProject: !Ref CodeBuildProject

  ExecuteCodeBuild:
    Type: AWS::Lambda::Function
    DependsOn: CodeBuildLambdaExecutionRole
    Properties:
      Handler: index.handler
      Timeout: 600
      Role: !GetAtt 'CodeBuildLambdaExecutionRole.Arn'
      Runtime: python3.6
      Code:
        ZipFile: |
          import logging
          import boto3
          import os
          import cfnresponse
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          client = boto3.client('codebuild')
          def handler(event, context):
              if event['RequestType'] != 'Delete':
                try:
                    buildproject = event['ResourceProperties']['BuildProject']
                    response = client.start_build(projectName=event['ResourceProperties']['BuildProject'])
                except Exception as e:
                    print(e)
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "CustomResourcePhysicalID")
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "CustomResourcePhysicalID")
              return "Success"


  CodeBuildProject:
    Type: 'AWS::CodeBuild::Project'
    DependsOn: TLXLogGroup
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
        - Name: AWS_ACCOUNT_ID
          Type: PLAINTEXT
          Value: !Ref 'AWS::AccountId'
        - Name: AWS_DEFAULT_REGION
          Type: PLAINTEXT
          Value: !Ref 'AWS::Region'
        - Name: IMAGE_REPO_NAME
          Type: PLAINTEXT
          Value: !Ref ECRName
        - Name: IMAGE_TAG
          Type: PLAINTEXT
          Value: 'latest'
        Image: 'aws/codebuild/standard:2.0'
        PrivilegedMode: true # required to build Docker images
        Type: LINUX_CONTAINER  
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref TLXLogGroup
          Status: ENABLED
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Location: !Sub '${TLXLambdaS3Bucket}-${AWS::AccountId}-${AWS::Region}/cda-2018-flask-app.zip'
        BuildSpec: 'buildspec.yml'
        Type: S3
      TimeoutInMinutes: 30


# -------------------------------------------------------------------------------------------------------------------------------------------------------
# TLX Product Template - v1
# AWS Lambda Function that receives latest TLX image from TLX, 
# provide a rolling update of the ECS cluster
# ------------------------------------------------------------------------------------------------------------------------------------------------------- 

  TLXLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  TLXImagePullLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: TLXImagePullLambda
      MemorySize: 128
      Role: !GetAtt TLXLambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        S3Bucket: 
          Fn::Join:
              - ''
              - - !Ref TLXLambdaS3Bucket
                - '-'
                - !Ref 'AWS::AccountId'
                - '-'
                - !Ref 'AWS::Region'
        S3Key: Lambda/tlx-image-pull-processor.zip
      Runtime: python2.7
      Timeout: 300
      Environment:
        Variables:
          TLX_SERVICE_URL: !Ref TLXServiceURL

# -------------------------------------------------------------------------------------------------------------------------------------------------------
# TLX Product Template - v1
# This section provisions 
#  - TLX CloudWatch Logs
#  - SNS topic with a HTTP(s) subscriber
#  ---------TLX HTTP endpoint (URL) subscribes to the SNS topic
#  - CloudWatch Logs Metric Filter that publishes events in real time to the SNS topic
#  ---------This pattern can be used to seamlessly publish events from any CW log ( not just the TLX CW log) attached to any AWS Service ( such as CloudTrail, S3 etc)
# ------------------------------------------------------------------------------------------------------------------------------------------------------- 

  TLXSNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: tlxsnstopic
      TopicName: !Ref TLXSNSTopicName

  TLXSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    DependsOn: TLXSNSTopic
    Properties: 
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - SNS:GetTopicAttributes
          - SNS:SetTopicAttributes
          - SNS:AddPermission
          - SNS:RemovePermission
          - SNS:DeleteTopic
          - SNS:Subscribe
          - SNS:ListSubscriptionsByTopic
          - SNS:Publish
          - SNS:Receive
          Resource: 
            Fn::Join:
                - ''
                - - 'arn:aws:sns:'
                  - Ref: AWS::Region
                  - ':'
                  - Ref: AWS::AccountId
                  - ':'
                  - !Ref TLXSNSTopicName
      Topics: 
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${TLXSNSTopicName}'

       
  TLXSNSSubscription:
    Type: AWS::SNS::Subscription
    DependsOn: TLXSNSTopic
    Properties: 
      Protocol: https
      Endpoint: !Ref TLXEventUpdatesURL
      TopicArn: 
        Fn::Join:
            - ''
            - - 'arn:aws:sns:'
              - Ref: AWS::Region
              - ':'
              - Ref: AWS::AccountId
              - ':'
              - !Ref TLXSNSTopicName

  TLXLogNotificationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: TLXEventCapture
      AlarmDescription: Notify if Log Updates occur
      MetricName: TLXLogNotifications
      Namespace: LogMetrics
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      TreatMissingData: notBreaching
      AlarmActions: 
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${TLXSNSTopicName}'
      ComparisonOperator: GreaterThanOrEqualToThreshold
  TLXLogNotificationFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref TLXLogGroup
      FilterPattern: ""
#     This can be any filter to filter on service and event for e.g.
#      FilterPattern: |-
#        {
#          ($.eventSource = s3.amazonaws.com) &&
#          (($.eventName = PutBucketAcl) || 
#           ($.eventName = PutBucketPolicy) || 
#            ($.eventName = PutBucketCors) || 
#          )
#        }
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: LogMetrics
        MetricName: TLXLogNotifications

# -------------------------------------------------------------------------------------------------------------------------------------------------------
# TLX Product Template - v1
# This section provisions the ECS Stack for the TLX Image
# Provisions a Container, Task, Service, ALB and associated VPC, Security Groups for TLX Image
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
         -
          Effect: Allow
          Principal:
            Service:
              - ecs-tasks.amazonaws.com
          Action: sts:AssumeRole

  ECSTaskExecutionPolicy:
    Type: AWS::IAM::Policy
    DependsOn: ECSTaskExecutionRole
    Properties:
      PolicyName: ECSTaskExecutionPolicy
      PolicyDocument:
        Statement:
        -
          Effect: Allow
          Action:
            - "ecr:GetAuthorizationToken"
            - "ecr:BatchCheckLayerAvailability"
            - "ecr:GetDownloadUrlForLayer"
            - "ecr:BatchGetImage"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            - "logs:CreateLogGroup"
            - "logs:DescribeLogStreams"
          Resource: "*"
      Roles:
        -
          Ref: ECSTaskExecutionRole

  TLXDefaultECSTask:
    Type: AWS::ECS::TaskDefinition
    DependsOn: CodeBuildProject
    Properties:
      ContainerDefinitions:
        - Cpu: 2048
          Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRName}:latest"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Sub ${AWS::Region}
              awslogs-group: !Ref TLXLogGroup
              awslogs-stream-prefix: /ecs
              awslogs-create-group: true
          MemoryReservation: 4096
          Name: tlx-fargate-container
          PortMappings:
           - ContainerPort: 80
      Cpu: '2048'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Memory: '4096'
      NetworkMode: awsvpc

  TLXDefaultALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: false
        - Key: idle_timeout.timeout_seconds
          Value: 300
        - Key: routing.http2.enabled
          Value: true
        - Key: deletion_protection.enabled
          Value: false
      Name: tlx-fargate-alb
      Scheme: internet-facing
      SecurityGroups:
        - !Select ['0', !Ref DefaultSecurityGroup]
      Subnets:
        - !Select ['0', !Ref DefaultSubnets]
        - !Select ['1', !Ref DefaultSubnets]
      Type: application

  # listener for default ALB
  ALBHTTPlistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TLXDefaultTargetGroup
      LoadBalancerArn: !Ref TLXDefaultALB
      Port: 80
      Protocol: HTTP

  # ingress rule for default security group
  # allows load balancer to listen on port 80
  SGIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: 80
      GroupId: !Select ['0', !Ref DefaultSecurityGroup]
      IpProtocol: tcp
      ToPort: 80

  TLXDefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: TLXDefaultALB
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 120
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: 200
      Name: tlx-fargate-target-group
      Port: 80
      Protocol: HTTP
      TargetType: ip
      TargetGroupAttributes:
        - Key: slow_start.duration_seconds
          Value: 30
        - Key: deregistration_delay.timeout_seconds
          Value: 60
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 1800
      UnhealthyThresholdCount: 2
      VpcId: !Select ['0', !Ref DefaultVPC]

  TLXDefaultECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: tlx-fargate-cluster

  TLXDefaultECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBHTTPlistener
    Properties:
      Cluster: !Ref TLXDefaultECSCluster
      DesiredCount: 2
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerPort: 80
          ContainerName: tlx-fargate-container
          TargetGroupArn: !Ref TLXDefaultTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Select ['0', !Ref DefaultSecurityGroup]
          Subnets:
            - !Select ['0', !Ref DefaultSubnets]
            - !Select ['1', !Ref DefaultSubnets]
      PlatformVersion: LATEST
      SchedulingStrategy: REPLICA
      ServiceName: tlx-fargate-service
      TaskDefinition: !Ref TLXDefaultECSTask





